import matplotlib.pyplot as plt
import numpy as np

# Define the domain of the cylinder
h = 0.41  # Height of the cylinder
w = 2.1   # Width of the cylinder

# Generate a grid of points within the cylinder domain
num_points_x = 100  # Number of points along the x-axis
num_points_y = 100  # Number of points along the y-axis
x_points = np.linspace(0, w, num_points_x)
y_points = np.linspace(0, h, num_points_y)
X, Y = np.meshgrid(x_points, y_points)
grid_points = np.vstack((X.flatten(), Y.flatten())).T

# Predict u, v, and p at the grid points using the trained model
inputs = tf.convert_to_tensor(grid_points, dtype=tf.float32)
p_pred, u_pred, v_pred = model(inputs)
P_pred = np.reshape(p_pred.numpy(), (num_points_y, num_points_x))
U_pred = np.reshape(u_pred.numpy(), (num_points_y, num_points_x))
V_pred = np.reshape(v_pred.numpy(), (num_points_y, num_points_x))

# Plot contours of pressure (p)
plt.figure(figsize=(8, 6))
plt.contourf(X, Y, P_pred, cmap='viridis')
plt.colorbar(label='Pressure (p)')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Pressure Contour')
plt.show()

# Plot contours of velocity component u
plt.figure(figsize=(8, 6))
plt.contourf(X, Y, U_pred, cmap='viridis')
plt.colorbar(label='Velocity component u')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Velocity Component u Contour')
plt.show()

# Plot contours of velocity component v
plt.figure(figsize=(8, 6))
plt.contourf(X, Y, V_pred, cmap='viridis')
plt.colorbar(label='Velocity component v')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Velocity Component v Contour')
plt.show()
